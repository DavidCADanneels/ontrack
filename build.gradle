buildscript {
    ext {
        springBootVersion = '1.5.12.RELEASE'
        kotlinVersion = '1.2.40'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'net.nemerosa.versioning' version '2.6.1'
    id 'nebula.os-package' version '2.2.6'
    id 'org.sonarqube' version '2.5'
}

/**
 * Profiles
 */

ext {
    documentationProfile = project.hasProperty('documentation')
}

/**
 * Meta information
 */

allprojects {
    group = 'net.nemerosa.ontrack'
    version = versioning.info.display
}

/**
 * Resolution
 */

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
}


/**
 * Java projects
 */

ext {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

def javaProjects = subprojects.findAll {
    it.path != ':ontrack-web'
}

def coreProjects = javaProjects.findAll {
    it.path != ':ontrack-dsl'
}

configure(javaProjects) {

    /**
     * For all Java projects
     */

    apply plugin: 'java'
    apply plugin: 'maven-publish'

    // Javadoc

    if (documentationProfile) {
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        // Sources

        task sourceJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }
    }

    // POM file

    publishing {
        publications {
            mavenCustom(MavenPublication) {
                from components.java
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', project.name)
                    root.appendNode('description', project.description ?: project.name)
                    root.appendNode('url', 'http://nemerosa.github.io/ontrack')

                    def licenses = root.appendNode('licenses')
                    def license = licenses.appendNode('license')
                    license.appendNode('name', 'The MIT License (MIT)')
                    license.appendNode('url', 'http://opensource.org/licenses/MIT')
                    license.appendNode('distribution', 'repo')

                    def scm = root.appendNode('scm')
                    scm.appendNode('url', 'https://github.com/nemerosa/ontrack')
                    scm.appendNode('connection', 'scm:git://github.com/nemerosa/ontrack')
                    scm.appendNode('developerConnection', 'scm:git://github.com/nemerosa/ontrack')

                    def developers = root.appendNode('developers')
                    def developer = developers.appendNode('developer')
                    developer.appendNode('id', 'dcoraboeuf')
                    developer.appendNode('name', 'Damien Coraboeuf')
                    developer.appendNode('email', 'damien.coraboeuf@gmail.com')
                }
            }
        }
    }

    model {
        tasks.generatePomFileForMavenCustomPublication {
            destination = file("${buildDir}/poms/${project.name}-${version}.pom")
        }
    }

    afterEvaluate {
        tasks.assemble.dependsOn 'generatePomFileForMavenCustomPublication'
    }

    // Archives for Javadoc and Sources

    artifacts {
        if (documentationProfile) {
            archives javadocJar
            archives sourceJar
        }
    }

}

configure(coreProjects) {

    /**
     * For all Java projects
     */

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
        dependencies {
            dependency 'commons-io:commons-io:2.6'
            dependency 'org.apache.commons:commons-lang3:3.7'
            dependency 'org.apache.commons:commons-text:1.3'
            dependency 'org.projectlombok:lombok:1.16.18'
            dependency 'net.jodah:failsafe:1.1.0'
            dependency 'commons-logging:commons-logging:1.2'
            dependency 'org.apache.commons:commons-math3:3.6.1'
            dependency 'com.google.guava:guava:25.0-jre'
            dependency 'net.sf.dbinit:dbinit:1.4.0'
            dependency 'args4j:args4j:2.33'
            dependency 'org.jgrapht:jgrapht-core:1.1.0'
            dependency 'org.kohsuke:groovy-sandbox:1.19'
            dependency 'com.graphql-java:graphql-java:8.0'
            dependency "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"
            // Overrides from Spring Boot
            dependency 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.5'
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
        compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
        compileOnly 'org.projectlombok:lombok'
        testCompile 'org.projectlombok:lombok'
        // Testing
        testCompile 'junit:junit'
        testCompile 'org.mockito:mockito-core'
        testCompile "org.jetbrains.kotlin:kotlin-test"
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    // Unit tests run with the `test` task
    test {
        include '**/*Test.class'
        reports {
            html.enabled = false
        }
    }

    // Integration tests
    task integrationTest(type: Test, dependsOn: 'test') {
        include '**/*IT.class'
        jvmArgs '-Xmx512m'
        reports {
            html.enabled = false
        }
    }

    // Acceptance tests
    task acceptanceTest(type: Test, dependsOn: 'integrationTest') {
        include '**/ACC*.class'
        ignoreFailures true
        reports {
            html.enabled = false
        }
    }

}

/**
 * Packaging for delivery
 */

apply from: 'gradle/packaging.gradle'

/**
 * Packaging for OS
 */

apply from: 'gradle/os-packaging.gradle'

/**
 * Docker tasks
 */

apply from: 'gradle/docker.gradle'

/**
 * Acceptance tasks
 */

apply from: 'gradle/acceptance.gradle'

/**
 * Publication tasks
 *
 * Standalone Gradle tasks in `gradle/publication.gradle` and in
 * `gradle/production.gradle`
 */

/**
 * General test report
 */

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` tasks in all core subprojects
    reportOn coreProjects*.test, coreProjects*.integrationTest, coreProjects*.acceptanceTest
}

/**
 * Wrapper definition
 */

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}
