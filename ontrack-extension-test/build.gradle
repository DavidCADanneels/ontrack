buildscript {
    repositories {
        mavenLocal() // Important: used for testing
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "net.nemerosa.ontrack:ontrack-extension-plugin:${ontrackVersion}"
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.8'
    }
}

plugins {
    id 'net.nemerosa.versioning' version '2.6.0'
}

versioning {
    gitRepoRootDir = rootProject.file('..')
}

group = 'net.nemerosa.ontrack'
version = versioning.info.display

repositories {
    mavenLocal() // Important: used for testing
    mavenCentral()
}

apply plugin: 'ontrack'

dependencies {
    compileOnly 'org.projectlombok:lombok:1.16.10'
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task prepareDockerImage(type: Copy) {
    dependsOn bootRepackage
    from 'build/libs'
    include '*.jar'
    exclude '*-javadoc.jar'
    exclude '*-sources.jar'
    into project.file('src/main/docker')
    rename '.*', 'ontrack-extension-test.jar'
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn prepareDockerImage
    inputDir project.file('src/main/docker')
    tag "nemerosa/ontrack-extension-test:${version}"
}

assemble.dependsOn buildDockerImage

task createAppContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ["${ontrackTestDockerPort}:8080"]
}


task startAppContainer(type: DockerStartContainer) {
    dependsOn createAppContainer
    targetContainerId { createAppContainer.getContainerId() }
}

task stopAppContainer(type: DockerStopContainer) {
    dependsOn createAppContainer
    targetContainerId { createAppContainer.getContainerId() }
}

task removeAppContainer(type: DockerRemoveContainer) {
    dependsOn stopAppContainer
    targetContainerId { createAppContainer.getContainerId() }
}

test {
    include '**/*Test.class'
}

task extensionTest(type: Test) {
    dependsOn startAppContainer
    finalizedBy removeAppContainer
    include '**/*Acceptance.class'
    ignoreFailures true
    outputs.upToDateWhen { false }  // Always run tests
    systemProperty 'ontrack.url', "http://${ontrackTestDockerHost}:${ontrackTestDockerPort}"
}

build.dependsOn extensionTest
