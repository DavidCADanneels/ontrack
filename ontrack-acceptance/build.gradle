buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
    }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'

ext {
    seleniumVersion = '3.2.0'
}

dependencies {
    testCompile project(':ontrack-client')
    testCompile project(':ontrack-dsl')
    testCompile project(':ontrack-dsl-shell')
    testCompile project(':ontrack-test-utils')
    testCompile 'org.codehaus.groovy:groovy-all'
    testCompile 'org.springframework.boot:spring-boot-starter'

    testCompile "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-support:${seleniumVersion}"

    testRuntime libraries.log4j
}

//noinspection GroovyAssignabilityCheck
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.seleniumhq.selenium' && details.requested.name != 'htmlunit-driver') {
            details.useVersion seleniumVersion
        }
    }
}

/**
 * Packaging
 */

task testJar(type: Jar) {
    from sourceSets.test.output
}

artifacts {
    archives testJar
}

bootRepackage {
    mainClass = 'net.nemerosa.ontrack.acceptance.boot.Start'
    withJarTask = 'testJar'
    customConfiguration = 'testRuntime'
}

task normaliseJar(type: Copy) {
    dependsOn bootRepackage
    doFirst {
        project.mkdir "${buildDir}/libs"
    }
    from testJar.outputs.files.singleFile
    into "${buildDir}/libs"
    rename { "ontrack-acceptance.jar" }
}

task copyJarForDocker(type: Copy) {
    dependsOn normaliseJar
    from "${buildDir}/libs/ontrack-acceptance.jar"
    into "${projectDir}/src/main/compose/docker"
}

assemble.dependsOn normaliseJar
assemble.dependsOn copyJarForDocker

/**
 * Local test definitions
 */

ext {
    ontrackUrl = 'http://localhost:8080'
    ontrackJvmOptions = project.hasProperty('ontrackJvmOptions') ? project.ontrackJvmOptions : '-Xmx256m'
}

acceptanceTest {
    outputs.upToDateWhen { false }  // Always run tests
    systemProperty 'ontrack.url', ontrackUrl
    systemProperty 'ontrack.implicitWait', project.hasProperty('ontrackImplicitWait') ? ontrackImplicitWait : 5
}

// Disable unit tests (none in this project)
test {
    enabled = false
}

// Disable normal JAR creation
jar {
    enabled = false
}
