/**
 * Management of the module exportation for DSL-related modules of Ontrack.
 *
 * Hints:
 *
 * In order to publish to the local repository:
 *
 *      ./gradlew install
 *
 */

/**
 * List of modules to export
 */

def exporting = [
        ':ontrack-dsl',
        ':ontrack-client',
        ':ontrack-json',
        ':ontrack-common',
]

/**
 * Configuration Maven for all the modules to export
 */

exporting.each { path ->
    def p = project(path)
    p.with {

        // Maven tasks available
        apply plugin: 'maven'

        // Javadoc generation
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        // Source generation
        task sourceJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        // Archives for Javadoc and Sources
        artifacts {
            archives javadocJar, sourceJar
        }

        // Maven POM
        task writePomFiles << {
            // Developer information missing
            pom {
                project {
                    name = p.name
                    description p.description
                    url 'http://nemerosa.github.io/ontrack'
                    licenses {
                        license {
                            name 'The MIT License (MIT)'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                    scm {
                        url = 'https://github.com/nemerosa/ontrack'
                        connection = 'scm:git:git://github.com/nemerosa/ontrack'
                        developerConnection = 'scm:git:git://github.com/nemerosa/ontrack'
                    }
                    developers {
                        developer {
                            id = 'dcoraboeuf'
                            name = 'Damien Coraboeuf'
                            email = 'damien.coraboeuf@gmail.com'
                        }
                    }
                }
            }.writeTo("${buildDir}/poms/${project.name}-${version}.pom")
        }

        // Links with assembly
        assemble.dependsOn writePomFiles

        // Builds means install
        if (rootProject.hasProperty('install')) {
            build.dependsOn 'install'
        }

    }
}