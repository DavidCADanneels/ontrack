import java.util.regex.Pattern

/**
 * Acceptance tasks
 *
 * Only used to run from a packaged Ontrack application against a running server.
 *
 * For local development testing, running the following tasks is enough:
 *
 * ./gradlew build localAcceptanceTest
 */


/**
 * Docker start class
 */
class DockerStart extends DefaultTask {

    String image = 'nemerosa/ontrack:latest'

    File data

    File conf

    String profile = 'prod'

    String publish = ''

    private String cid

    private int port

    /**
     * Utility method to get a published port
     */
    int getPublishedPort (String cid, int port = 443) {
        new ByteArrayOutputStream().withStream { os ->
            project.exec {
                executable = 'docker'
                args = ['port', cid, port]
                standardOutput = os
            }
            def output = os.toString().trim()
            def m = Pattern.compile(/^.*:(\d+)$/).matcher(output)
            if (m.matches()) {
                m.group(1) as int
            } else {
                throw new GradleException("Cannot parse port from ${output}")
            }
        }
    }

    @TaskAction
    def start() {
        println "[${name}] Starting ${image} for profile ${profile}..."
        // All arguments
        List<String> arguments = ['run', '--detach', "--env=PROFILE=${profile}"]
        // Port publication
        String portPublication
        if (publish) {
            println "[${name}] Publishing ${publish}..."
            arguments << "--publish=${publish}"
        } else {
            println "[${name}] Publishing on random ports..."
            arguments << '--publish-all'
        }
        // Volumes
        if (data) {
            println "[${name}] Data mount: ${data}"
            arguments << "--volume=${data}:/var/ontrack/data"
        } else {
            println "[${name}] No data mount"
        }
        if (conf) {
            println "[${name}] Conf mount: ${conf}"
            arguments << "--volume=${conf}:/var/ontrack/conf"
        } else {
            println "[${name}] No conf mount"
        }
        // Image to start
        arguments << image
        // Starting the container
        def output = new ByteArrayOutputStream()
        project.exec {
            executable 'docker'
            args = arguments
            standardOutput = output
        }
        // Getting the container ID
        this.cid = output.toString().trim()
        println "[${name}] Container ${cid} started"
        // Getting the published port
        this.port = getPublishedPort(this.cid)
        println "[${name}] Application running on port ${port}"
        project.ext.acceptanceOntrackPort = this.port
    }

    String getCid() {
        cid
    }

    int getPort() {
        port
    }
}

/**
 * Docker stop task
 */
class DockerStop extends DefaultTask {

    String startTask

    @TaskAction
    def stop() {
        // Gets the start task
        def task = project.tasks.getByName(startTask) as DockerStart
        // Stopping the container
        println "[${name}] Stopping container at ${task.cid} created by ${startTask}"
        project.exec {
            executable 'docker'
            args 'rm', '--force', '--volumes', task.cid
        }
    }

}

/**
 * Launching acceptance tests
 */
class RemoteAcceptanceTest extends DefaultTask {

    boolean disableSsl = false

    String acceptanceContext = 'default'

    @TaskAction
    def launch() {
        // Collecting the data
        String acceptanceJar = project.properties.acceptanceJar
        // Fixed URL?
        String applicationUrl
        if (project.hasProperty('acceptanceOntrackUrl')) {
            applicationUrl = project.properties.acceptanceOntrackUrl
        } else {
            // Gets the port
            int applicationPort
            def dockerStart = taskDependencies.getDependencies(this).find { it instanceof DockerStart } as DockerStart
            if (dockerStart) {
                applicationPort = dockerStart.port
            } else {
                applicationPort = project.properties.acceptanceOntrackPort as int
            }
            // Computes the URL
            applicationUrl = "${project.properties.acceptanceOntrackScheme}://${project.properties.acceptanceOntrackHost}:${applicationPort}"
        }
        // Logging
        println "[${name}] Acceptance library at ${acceptanceJar}"
        println "[${name}] Application at ${applicationUrl}"
        // Running the tests
        project.exec {
            workingDir project.projectDir
            executable 'java'
            args '-jar', "${acceptanceJar}",
                    "--ontrack.url=${applicationUrl}",
                    "--ontrack.admin=${project.properties.acceptanceOntrackPassword}",
                    "--ontrack.disableSsl=${disableSsl}",
                    "--ontrack.context=${acceptanceContext}",
                    "--ontrack.timeout=${project.properties.acceptanceTimeout}"
        }
    }
}

/**
 * CI environment
 */

task ciDockerStart(type: DockerStart) {
    image = "nemerosa/ontrack:latest"
    conf = file('gradle/env/ci')
    profile = 'acceptance'
}

task ciDockerStop(type: DockerStop) {
    startTask = 'ciDockerStart'
}

task ciAcceptanceTest(type: RemoteAcceptanceTest) {
    disableSsl = true
    dependsOn ciDockerStart
    finalizedBy ciDockerStop
}

/**
 * DO environment
 */

class DOSetup extends DefaultTask {

    String apiToken
    String dropletName
    String region = 'ams2'
    String size = '512mb'

    private String ip

    @TaskAction
    def setup() {
        // Creates the machine
        project.exec {
            executable 'docker-machine'
            args 'create',
                    '--driver', 'digitalocean',
                    '--digitalocean-access-token', apiToken,
                    '--digitalocean-image', 'docker',
                    '--digitalocean-region', region,
                    '--digitalocean-size', size,
                    dropletName
        }
        // Gets its IP
        ip = new ByteArrayOutputStream().withStream { os ->
            project.exec {
                executable = 'docker-machine'
                args = ['ip', dropletName]
                standardOutput = os
            }
            os.toString().trim()
        }
        // Displays the IP
        println "[${name}] Droplet ${dropletName} available at ${ip}"
    }

    String getIp() {
        return ip
    }
}

task doSetup(type: DOSetup) {
    doFirst {
        // Checks the token
        if (!digitalOceanAccessToken) {
            throw new GradleException("Missing digitalOceanAccessToken parameter")
        }
        // Checks the version
        if (!ontrackVersion) {
            throw new GradleException("Missing ontrackVersion parameter")
        }
    }
    apiToken = digitalOceanAccessToken
    dropletName = "ontrack-acceptance-${ontrackVersion}"
}

task doTeardown(type: Exec) {
    executable 'docker-machine'
    args = ['rm', '--force', "ontrack-acceptance-${ontrackVersion}"]
}
