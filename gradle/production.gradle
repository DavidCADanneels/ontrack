/**
 * Production tasks
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.nemerosa:http-client-json:1.1.0'
        classpath 'net.nemerosa.ontrack:ontrack-dsl:2.12.4'
    }
}

import net.nemerosa.httpclient.*
import net.nemerosa.httpclient.json.*
import net.nemerosa.ontrack.gradle.DOSetup
import net.nemerosa.ontrack.gradle.DockerStart
import net.nemerosa.ontrack.gradle.DockerStop
import net.nemerosa.ontrack.gradle.RemoteAcceptanceTest

class ProductionVersion extends DefaultTask {

    private String version

    @TaskAction
    void run() {
        def client = new JsonClientImpl(
                ClientBuilder
                        .create(project.properties.productionUrl, false)
                        .withLogger({ println "[${name}][HTTP] ${it}" })
                        .build(),
                true
        )
        try {
            version = client.get('info').version.full.asText()
        } catch (ClientGeneralException ignored) {
            println "[${name}] Cannot connect to the production URL at ${project.properties.productionUrl}"
            version = null
        }
        println "[${name}] Version = ${version}"
    }

    String getVersion() {
        return version
    }
}

task productionSetup(type: DOSetup) {
    apiToken = project.properties.digitalOceanAccessToken
    dropletName = project.properties.productionMachine
    region = 'fra1'
    size = '1gb'
}

task productionEnv {
    mustRunAfter productionSetup
    doFirst {
        project.exec {
            executable 'docker-machine'
            args = ['ssh', project.properties.productionMachine, 'mkdir -p /var/ontrack']
        }
        project.exec {
            executable 'docker-machine'
            args = ['ssh', project.properties.productionMachine, 'mkdir -p /var/ontrack/data']
        }
        project.exec {
            executable 'docker-machine'
            args = ['ssh', project.properties.productionMachine, 'rm -rf /var/ontrack/conf']
        }
        project.exec {
            executable 'docker-machine'
            args = ['scp', '-r', project.properties.productionConf, "${project.properties.productionMachine}:/var/ontrack/conf"]
        }
    }
}

task productionVersion(type: ProductionVersion)

task productionBackup {
    dependsOn productionVersion
    doFirst {
        // Classifier
        def version = productionVersion.version
        def classifier = version ?: new Date().format('yyyMMddHHmmss')
        // Paths
        def remotePath = "/var/ontrack/backup-${classifier}.tgz"
        def localPath = new File(buildDir, "backup-${classifier}.tgz").absolutePath
        // Creates a TAR
        println "[${name}] Creating backup on ${project.properties.productionMachine} at ${remotePath}"
        project.exec {
            executable 'docker-machine'
            args = [
                    'ssh', project.properties.productionMachine,
                    "tar czvf ${remotePath} --exclude=git --exclude=log -C /var/ontrack/data ."
            ]
        }
        // Gets the TAR locally
        println "[${name}] Getting local backup at ${localPath}"
        project.exec {
            executable 'docker-machine'
            args = [
                    'scp',
                    "${project.properties.productionMachine}:${remotePath}",
                    localPath
            ]
        }
    }
}

task productionStop(type: DockerStop) {
    dependsOn productionBackup
    machine = project.properties.productionMachine
    containerName = 'ontrack'
    remove = true
    removeVolumes = false
    ignoreError = true
    logFile = null
}

task productionStart(type: DockerStart) {
    dependsOn 'productionStop'
    machine = project.properties.productionMachine
    exposePort = true
    containerName = 'ontrack'
    image = "nemerosa/ontrack:${project.properties.ontrackVersion}"
    conf = file('/var/ontrack/conf') // Dir on the host, provisioned initially by productionEnv
    data = file('/var/ontrack/data') // Dir on the host, filled in by the application itself
    profile = 'prod'
    mustRunAfter productionEnv
}

task productionTest(type: RemoteAcceptanceTest) {
    disableSsl = false // Production test must use a valid SSL certificate
    acceptanceContext = 'production'
    acceptanceUrl = project.properties.productionUrl
    acceptanceTimeout = 600 // 10 minutes for the startup...
    acceptanceImplicitWait = 30
}

task productionInstall {
    dependsOn productionSetup
    dependsOn productionEnv
    dependsOn productionStart
    dependsOn productionTest
}

task productionUpgrade {
    dependsOn productionStart
    dependsOn productionTest
}
