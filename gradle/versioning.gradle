/**
 * Versioning policy.
 *
 * The following information must be collected:
 *      - the display version - version to actually display to the user
 *      - the full version - technical version, usually hidden from the user
 *      - the branch - identifier for the branch, used in Ontrack
 *      - the build - the build number for the associated branch, used in Ontrack
 *      - the source - where the version was computed from
 *      - the source type - branch prefix
 *      - the commit - the commit for this version
 */

// Information to collect
def versionDisplay
def versionFull
def versionBranch
def versionBuild
def versionSource
def versionSourceType
def versionCommit

boolean hasGit = project.file('.git').exists()

def normalise(String value) {
    value.replaceAll(/[^A-Za-z0-9\.\-_]/, '-')
}

// No git information
if (!hasGit) {
    versionDisplay = 'local'
    versionFull = 'local'
    versionBranch = 'n/a'
    versionBuild = '-'
    versionSource = 'local'
    versionSourceType = 'local'
    versionCommit = 'n/a'
}

// We can use git
else {
    // Gets the branch info
    versionSource = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    // Source type
    int pos = versionSource.indexOf('/')
    if (pos > 0) {
        versionSourceType = versionSource.substring(0, pos)
    } else {
        versionSourceType = versionSource
    }
    // Gets the current commit (full hash)
    versionCommit = 'git log -1 --format=%H'.execute().text.trim()
    // Gets the current commit (short hash)
    versionBuild = 'git log -1 --format=%h'.execute().text.trim()
    // Branch info
    versionBranch = normalise(versionSource)
    // Full version
    versionFull = "${versionBranch}-${versionBuild}"
    // Display version
    if (versionSourceType == 'release') {
        versionDisplay = versionSource.substring(pos + 1)
    } else {
        versionDisplay = versionBranch
    }
}

// Storing the version information
project.ext.versionDisplay = versionDisplay
project.ext.versionFull = versionFull
project.ext.versionBranch = versionBranch
project.ext.versionBuild = versionBuild
project.ext.versionSource = versionSource
project.ext.versionSourceType = versionSourceType
project.ext.versionCommit = versionCommit

/**
 * Task to display the version information
 */
task displayVersion << {
    println "ontrack.version.display = ${project.versionDisplay}"
    println "ontrack.version.full = ${project.versionFull}"
    println "ontrack.version.branch = ${project.versionBranch}"
    println "ontrack.version.build = ${project.versionBuild}"
    println "ontrack.version.source = ${project.versionSource}"
    println "ontrack.version.sourceType = ${project.versionSourceType}"
    println "ontrack.version.commit = ${project.versionCommit}"
}

/**
 * Task to write the information down into a `version.properties` file
 */
task writeVersion << {
    project.file('version.properties').text = """\
ONTRACK_VERSION_DISPLAY = ${project.versionDisplay}
ONTRACK_VERSION_FULL = ${project.versionFull}
ONTRACK_VERSION_BRANCH = ${project.versionBranch}
ONTRACK_VERSION_BUILD = ${project.versionBuild}
ONTRACK_VERSION_SOURCE = ${project.versionSource}
ONTRACK_VERSION_SOURCE_TYPE = ${project.versionSourceType}
ONTRACK_VERSION_COMMIT = ${project.versionCommit}
"""
}