/**
 * PUBLICATION OF A PACKAGE IN GITHUB
 *
 * See the Wiki at https://github.com/nemerosa/ontrack/wiki/Delivery
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    }
}

import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.Method

/**
 * Checking the required properties
 */

if (!hasProperty('ontrackBuild')) throw new GradleException('ontrackBuild property must be set.')
if (!hasProperty('ontrackUserName')) throw new GradleException('ontrackUserName property must be set.')
if (!hasProperty('ontrackUserPassword')) throw new GradleException('ontrackUserPassword property must be set.')
if (!hasProperty('githubToken')) throw new GradleException('githubToken property must be set.')
if (!hasProperty('releasePath')) throw new GradleException('releasePath property must be set.')

/**
 * Optional properties
 */

// TODO #65 Use HTTPS for ontrack@ontrack
if (!hasProperty('ontrackUrl')) ext { ontrackUrl = 'http://ontrack.nemerosa.net:8080' }
if (!hasProperty('ontrackProject')) ext { ontrackProject = 'ontrack' }
if (!hasProperty('ontrackBranch')) ext { ontrackBranch = '2.0' }
if (!hasProperty('githubRepository')) ext { githubRepository = 'nemerosa/ontrack' }

/**
 * Logging the set-up
 */

println "ontrack build to publish       : ${ontrackBuild}"
println "ontrack URL                    : ${ontrackUrl}"
println "ontrack project                : ${ontrackProject}"
println "ontrack branch                 : ${ontrackBranch}"
println "ontrack user name              : ${ontrackUserName}"
println "ontrack user password          : ${ontrackUserPassword}"
println "GitHub repository to publish to: ${githubRepository}"
println "GitHub API token               : <set>"
println "Path to the release files      : ${releasePath}"

/**
 * Creating a GitHub release
 */
task githubReleaseCreate << {
    def url = "https://api.github.com/repos/${githubRepository}/releases"
    def http = new HTTPBuilder(url)
    http.request(Method.POST, ContentType.JSON) { req ->
        headers['Authorization'] = "token ${githubToken}"
        headers['User-Agent'] = "${githubRepository}"
        body = [
                tag_name  : "${ontrackBuild}".toString(),
                name      : "v${ontrackBuild}".toString(),
                prerelease: true
        ]
        response.success = { resp, json ->
            int id = json.id as int
            println "Release v${ontrackBuild} created with ID = $id"
            project.tasks.githubReleaseCreate.ext.releaseId = id
        }
    }
}

def uploadAsset(File file, String name, int releaseId) {
    def url = "https://uploads.github.com/repos/${githubRepository}/releases/${releaseId}/assets?name=${name}"
    def http = new HTTPBuilder(url)
    http.request(Method.POST) { req ->
        headers['Authorization'] = "token ${githubToken}"
        headers['User-Agent'] = "${githubRepository}"
        headers['Content-Type'] = 'application/zip'
        send ContentType.BINARY, file.bytes
    }
}

/**
 * Uploading assets to a GitHub release
 */
task githubReleaseAssets(dependsOn: 'githubReleaseCreate') << {
    int id = project.tasks.githubReleaseCreate.releaseId
    File file = new File(releasePath as String, "${ontrackBuild}.jar")
    println "Publishing ${file} to release ${ontrackBuild} ($id)..."
    if (!file.exists()) {
        throw new GradleException("File ${file} cannot be published because it does not exist.")
    } else {
        uploadAsset file, 'ontrack.jar', id
    }
}

/**
 * TODO Getting the change log between the build to promote and the last promoted one
 */
task ontrackChangeLog

/**
 * Promoting the build in ontrack @ ontrack
 */
task ontrackPromote << {
    // Gets the build ID from ontrack
    def url = "${ontrackUrl}/structure/entity/build/${ontrackProject}/${ontrackBranch}/${ontrackBuild}"
    def http = new HTTPBuilder(url)
    http.auth.basic ontrackUserName, ontrackUserPassword
    def buildId = http.get(contentType: ContentType.JSON).id
    println "Build ${ontrackBuild} has ID ${buildId}"
}
ontrackPromote.mustRunAfter ontrackChangeLog

/**
 * TODO Setting the change log as a description in GitHub
 */
task githubReleaseDescription(dependsOn: ['githubReleaseCreate', 'ontrackChangeLog'])

/**
 * Main publication task
 */
task publish(dependsOn: ['githubReleaseCreate', 'githubReleaseAssets', 'ontrackChangeLog', 'ontrackPromote', 'githubReleaseDescription'])

/**
 * Support functions
 */

def String authorizationToken() {
    'Basic ' + "${ontrackUserName}:${ontrackUserPassword}".toString().bytes.encodeBase64().toString()
}