/**
 * Release and publication tasks
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.nemerosa:http-client-json:1.0.0'
    }
}

/**
 * Maven publication
 */

apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'io.codearte.nexus-staging'

if (!project.properties.ontrackVersion) throw new GradleException("Missing ontrackVersion property")
if (!project.properties.ossrhUser) throw new GradleException("Missing ossrhUser property")
if (!project.properties.ossrhPassword) throw new GradleException("Missing ossrhPassword property")

artifacts {
    archives file: file("ontrack-dsl-${ontrackVersion}.pom"), extension: 'pom'
    archives file: file("ontrack-dsl-${ontrackVersion}.jar")
    archives file: file("ontrack-dsl-${ontrackVersion}-sources.jar"), classifier: 'sources'
    archives file: file("ontrack-dsl-${ontrackVersion}-javadoc.jar"), classifier: 'javadoc'
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }
        }
    }
}

nexusStaging {
    username = ossrhUser
    password = ossrhPassword
    numberOfRetries = 30
}

/**
 * Test task
 */

task publicationCollectArtifacts(type: Copy) {
    description = "Test task to collect built artifacts for testing the publication"
    dependsOn ':ontrack-dsl:assemble'
    from(project(':ontrack-dsl').file('build/libs')) {
        include '*.jar'
    }
    from(project(':ontrack-dsl').file('build/poms')) {
        include '*.pom'
    }
    into projectDir

}

/**
 * GitHub publication task tasks
 */

abstract class GitHubTask extends DefaultTask {

    String repository = 'nemerosa/ontrack'

    protected def gitHubPost(String url, Map data) {
        Client client = ClientBuilder
                .create(url, false)
                .withLogger({ println "[${name}][HTTP] ${it}" })
                .withCredentials(gitHubUser, gitHubPassword)
                .build()
        JsonClient jsonClient = new JsonClientImpl(client)
        return jsonClient.post(data, '')
    }

}

class GitHubReleaseCreate extends GitHubTask {

    String commit = 'HEAD'
    String tag

    private String releaseId

    @TaskAction
    void run() {
        println "[${name}] Createing release ${tag} from commit ${commit}..."
        releaseId = gitHubPost(
                "https://api.github.com/repos/${repository}/releases",
                [
                        target_commitish: commit,
                        tag_name: tag,
                        name: tag,
                ]
        ).id
        println "[${name}] Release ID = ${releaseId}"
    }

    String getReleaseId() {
        releaseId
    }
}

/**
 * GitHub publication tasks
 */

task publicationGitHubReleaseCreate(type: GitHubReleaseCreate) {
    commit = ontrackVersionCommit // VERSION_COMMIT
    tag = ontrackVersion          // VERSION_DISPLAY
}

task publicationGitHubReleaseUpload(type: GitHubReleaseUpload) {
    mustRunAfter publicationGitHubReleaseCreate
    releaseId = { t }
}

task publicationGitHubRelease {
    dependsOn publicationGitHubReleaseCreate
    dependsOn publicationGitHubReleaseUpload
// TODO Getting the change log from Ontrack
// TODO Setting the change log as description in the GitHub release
}

/**
 * Root tasks
 */

task publicationMaven {
    description = "Publication of the DSL library to the Maven Central"
    dependsOn 'uploadArchives'
    // TODO finalizedBy 'closeAndPromoteRepository'
}

task publicationRelease {
    dependsOn publicationMaven
    dependsOn publicationGitHubRelease
    // TODO finalizedBy 'closeAndPromoteRepository'
}