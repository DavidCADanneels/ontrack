buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.6.RELEASE")
    }
}

apply plugin: 'spring-boot'
apply plugin: 'groovy'

dependencies {
    compile project(':ontrack-ui-support')
    compile project(':ontrack-extension-api')
    compile project(':ontrack-extension-support')
    compile libraries.spring_boot_starter_web
    compile libraries.spring_boot_starter_security
    compile libraries.spring_boot_starter_actuator

    compile libraries.metrics_graphite

    runtime project(':ontrack-service')
    runtime project(':ontrack-repository-impl')
    runtime libraries.spring_boot_starter_aop
    runtime libraries.spring_boot_starter_jdbc
    runtime libraries.h2

    testCompile project(':ontrack-test-utils')
    testCompile project(':ontrack-it-utils')
    testCompile project(':ontrack-extension-jenkins')
    testCompile libraries.groovy

    // List of extensions
    runtime project(':ontrack-extension-general')
    runtime project(':ontrack-extension-jenkins')
    runtime project(':ontrack-extension-jira')
    runtime project(':ontrack-extension-svn')
    runtime project(':ontrack-extension-artifactory')
    runtime project(':ontrack-extension-git')
    runtime project(':ontrack-extension-github')
    runtime project(':ontrack-extension-combined')
}

/**
 * Cleaning the Web resources
 */

clean << {
    project.delete 'src/main/resources/application.properties'
    project.delete 'src/main/resources/static/assets'
    project.delete 'src/main/resources/static/fonts'
    project.delete 'src/main/resources/static/app'
    project.delete 'src/main/resources/static/vendor'
    project.delete 'src/main/resources/static/index.html'
}

/**
 * Copy of Web resources before release
 */

task copyWebResourcesRelease(dependsOn: ':ontrack-web:release') << {
    project.copy {
        from project(':ontrack-web').tasks.release.output
        into project.file('src/main/resources/static')
    }
}

task copyWebResourcesBuild(dependsOn: ':ontrack-web:build') << {
    project.copy {
        from project(':ontrack-web').tasks.build.output
        into project.file('src/main/resources/static')
    }
}

task generateVersionInfo << {
    // Amends the application.properties file with version information
    File file = project.file('src/main/resources/application.properties')
    file.text = """\
# This file is generated at build time to contain version information
# Do not edit it, do not commit it
ontrack.version.date = ${new Date().format("yyyy-MM-dd'T'HH:mm:ss")}
ontrack.version.display = ${rootProject.versioning.info.display}
ontrack.version.full = ${rootProject.versioning.info.full}
ontrack.version.branch = ${rootProject.versioning.info.branchId}
ontrack.version.build = ${rootProject.versioning.info.build}
ontrack.version.commit = ${rootProject.versioning.info.commit}
ontrack.version.source = ${rootProject.versioning.info.branch}
ontrack.version.sourceType = ${rootProject.versioning.info.branchType}
"""
}

release.dependsOn copyWebResourcesRelease
release.dependsOn generateVersionInfo

if (!('release' in gradle.startParameter.taskNames)) {
    build.dependsOn copyWebResourcesBuild
    build.dependsOn generateVersionInfo
}

processResources.mustRunAfter copyWebResourcesRelease
processResources.mustRunAfter copyWebResourcesBuild
processResources.mustRunAfter generateVersionInfo
